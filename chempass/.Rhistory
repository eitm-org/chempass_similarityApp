for (i in 1:3) {
# # Create a blank plot
rasterImage(image_list[[i]], 0, 0, 1, 1)  # Display the image
}
plot(image_list[[1]])
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
par(mfrow=c(3,1))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,2))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(2,2), heights=c(2,2))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(4,4), heights=c(4,4))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
layout(matrix(c(1,2,3), 2, 2, byrow = TRUE),
widths=c(4,4), heights=c(4,4))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
plot(image_list[[i]])  # Display the image
}
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], width =)  # Display the image
}
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
dev.new(width=20, height=10, unit="in", noRStudioGD = TRUE)
plot(image_list[[i]], width =)  # Display the image
}
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
dev.new(width=20, height=10, unit="in")
plot(image_list[[i]])  # Display the image
}
par(mfrow=c(3,1))
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], width=20, height=10)  # Display the image
}
dev.new(width=10, height=15, unit="in")
par(mfrow=c(3,1), mar=c(0,0,1,0)) # Reduced margins around plots
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]])  # Display the image
}
resized_images <- list()
for (i in 1:3) {
resized_images[[i]] <- image_scale(image_list[[i]], "1200x") # Scale to larger width
}
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]])  # Display the image
}
options(repr.plot.width=10, repr.plot.height=15)
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
plot(image_list[[i]])
}
options(repr.plot.width=10, repr.plot.height=15)
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
plot(image_list[[i]])
}
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], asp = 1)  # Display the image
}
dev.new(width=10, height=15, unit="in")
par(mfrow=c(3,1), mar=c(0,0,1,0)) # Reduced margins around plots
# Iterate and display
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], asp = 1)  # Display the image
}
resized_images <- list()
for (i in 1:3) {
# Force all images to the same width and height
# You can adjust these numbers as needed
resized_images[[i]] <- image_scale(image_list[[i]], "1200x800!")
}
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]])  # Display the image
}
dev.off()
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
graphics::rasterImage(resized_images[[i]], 0.1, 0.1, 0.5, 0.5)  # Display the image
}
plot.new()
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
graphics::rasterImage(resized_images[[i]], 0.1, 0.1, 0.5, 0.5)  # Display the image
}
par(mfrow=c(3,1))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
graphics::rasterImage(resized_images[[i]], 0.1, 0.1, 0.5, 0.5)  # Display the image
}
resized_images <- list()
for (i in 1:3) {
# Force all images to the same width and height
# You can adjust these numbers as needed
resized_images[[i]] <- image_scale(image_list[[i]], "1200x800!")
}
dev.new(width=12, height=18, unit="in")
par(mfrow=c(3,1), mar=c(1,1,1,1))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]], asp=1)  # Display the image
}
par(mfrow=c(3,1), mar=c(1,1,1,1))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], asp=1)  # Display the image
}
par(mfrow=c(3,1))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], asp=1)  # Display the image
}
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(image_list[[i]], asp=1)  # Display the image
}
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]], asp=1)  # Display the image
}
resized_images <- list()
for (i in 1:3) {
# Force all images to the same width and height
# You can adjust these numbers as needed
resized_images[[i]] <- image_scale(image_list[[i]], "1200x1200!")
}
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]], asp=1)  # Display the image
}
resized_images <- list()
for (i in 1:3) {
# Force all images to the same width and height
# You can adjust these numbers as needed
resized_images[[i]] <- image_scale(image_list[[i]], "1500x1200!")
}
par(mfrow=c(3,1), mar=c(0,0,1,0))
for (i in 1:3) {
# # Create a blank plot
#dev.new(width=20, height=10, unit="in")
plot(resized_images[[i]], asp=1)  # Display the image
}
dev.new(width=12, height=18, unit="in")
layout(matrix(1:3, ncol=1))  # Another way to set up the 3-row layout
for (i in 1:3) {
# Create more space for the plot
par(mar=c(0.5,0.5,0.5,0.5))
# Use a different plotting approach
plot(1, type="n", axes=FALSE, xlab="", ylab="",
xlim=c(0,1), ylim=c(0,1))
# Place the image to fill the plotting region
rasterImage(as.raster(resized_images[[i]]),
xleft=0, ybottom=0, xright=1, ytop=1)
}
image_list <- list()
for (i in 1:3) {
image_list[[i]] <- image_read(paste0("cluster", i, ".png"))
}
# Method 1: Using image_append for vertical stacking with resize
# First resize all images to be larger
resized_images <- lapply(image_list, function(img) {
image_scale(img, "1200x") # Scale width to 1200px, height keeps proportion
})
# Stack them vertically
stacked_image <- image_append(do.call(c, resized_images), stack = TRUE)
# Display the stacked image
plot(stacked_image)
# Method 2: Using grid graphics for more control
# Save to a PDF with precise control over size
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.9, "npc"), height = unit(0.28, "npc")),
rasterGrob(image_list[[2]], width = unit(0.9, "npc"), height = unit(0.28, "npc")),
rasterGrob(image_list[[3]], width = unit(0.9, "npc"), height = unit(0.28, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.8, "npc"), height = unit(0.6, "npc")),
rasterGrob(image_list[[2]], width = unit(0.8, "npc"), height = unit(0.6, "npc")),
rasterGrob(image_list[[3]], width = unit(0.8, "npc"), height = unit(0.6, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.8, "npc"), height = unit(0.8, "npc")),
rasterGrob(image_list[[2]], width = unit(0.8, "npc"), height = unit(0.8, "npc")),
rasterGrob(image_list[[3]], width = unit(0.8, "npc"), height = unit(0.8, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(1, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[2]], width = unit(1, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[3]], width = unit(1, "npc"), height = unit(1, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(1, "npc"), height = unit(1.5, "npc")),
rasterGrob(image_list[[2]], width = unit(1, "npc"), height = unit(1.5, "npc")),
rasterGrob(image_list[[3]], width = unit(1, "npc"), height = unit(1.5, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[2]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[3]], width = unit(0.6, "npc"), height = unit(1, "npc")),
ncol = 1
)
image_list <- list()
for (i in 1:3) {
image_list[[i]] <- image_read(paste0("cluster", i, ".png"))
}
# Method 1: Using image_append for vertical stacking with resize
# First resize all images to be larger
resized_images <- lapply(image_list, function(img) {
image_scale(img, "2000x") # Scale width to 1200px, height keeps proportion
})
# Stack them vertically
stacked_image <- image_append(do.call(c, resized_images), stack = TRUE)
# Display the stacked image
plot(stacked_image)
# Method 2: Using grid graphics for more control
# Save to a PDF with precise control over size
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[2]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[3]], width = unit(0.6, "npc"), height = unit(1, "npc")),
ncol = 1
)
image_list <- list()
for (i in 1:3) {
image_list[[i]] <- image_read(paste0("cluster", i, ".png"))
}
# Method 1: Using image_append for vertical stacking with resize
# First resize all images to be larger
resized_images <- lapply(image_list, function(img) {
image_scale(img, "4000x") # Scale width to 1200px, height keeps proportion
})
# Stack them vertically
stacked_image <- image_append(do.call(c, resized_images), stack = TRUE)
# Display the stacked image
plot(stacked_image)
# Method 2: Using grid graphics for more control
# Save to a PDF with precise control over size
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[2]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[3]], width = unit(0.6, "npc"), height = unit(1, "npc")),
ncol = 1
)
grid.arrange(
rasterGrob(image_list[[1]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[2]], width = unit(0.6, "npc"), height = unit(1, "npc")),
rasterGrob(image_list[[3]], width = unit(0.6, "npc"), height = unit(1, "npc")),
ncol = 1
)
library(png)
library(grid)
library(gridExtra)
display_image <- function(file_path, title, width = 0.9, height = 0.3) {
# Read the image
img_r <- readPNG(file_path)
# Create a viewport with fixed size relative to the page
vp <- viewport(width = unit(width, "npc"), height = unit(height, "npc"))
# Create the raster image with explicit width and height
raster_img <- rasterGrob(
img_r,
interpolate = TRUE,
width = unit(1, "npc"),  # Fill the viewport width
height = unit(1, "npc")  # Fill the viewport height
)
# Add the title
arranged <- arrangeGrob(
raster_img,
top = textGrob(title, gp = gpar(fontsize = 14, fontface = "bold"))
)
# Wrap in a fixed-size grob
return(frameGrob(arranged, vp = vp))
}
# Create a larger graphics device first
grid.newpage()
# For R GUI or RStudio
dev.new(width = 10, height = 15, unit = "in")
# Generate the cluster plots with fixed dimensions
cluster_grobs <- lapply(1:3, function(i) {
file_path <- paste0("cluster", i, ".png")
title <- paste("Cluster", i)
display_image(file_path, title, width = 0.95, height = 0.3)
})
# Generate the cluster plots with fixed dimensions
cluster_grobs <- lapply(1:3, function(i) {
file_path <- paste0("cluster", i, ".png")
title <- paste("Cluster", i)
display_image(file_path, title)
})
display_image <- function(file_path, title) {
# Read the image
img_r <- readPNG(file_path)
# Create a viewport with fixed size relative to the page
vp <- viewport(width = unit(0.9, "npc"), height = unit(0.3, "npc"))
# Create the raster image with explicit width and height
raster_img <- rasterGrob(
img_r,
interpolate = TRUE,
width = unit(1, "npc"),  # Fill the viewport width
height = unit(1, "npc")  # Fill the viewport height
)
# Add the title
arranged <- arrangeGrob(
raster_img,
top = textGrob(title, gp = gpar(fontsize = 14, fontface = "bold"))
)
# Wrap in a fixed-size grob
return(frameGrob(arranged, vp = vp))
}
grid.newpage()
# For R GUI or RStudio
dev.new(width = 10, height = 15, unit = "in")
# Generate the cluster plots with fixed dimensions
cluster_grobs <- lapply(1:3, function(i) {
file_path <- paste0("cluster", i, ".png")
title <- paste("Cluster", i)
display_image(file_path, title)
})
display_image <- function(file_path, title) {
img_r <- readPNG(file_path)
# Explicit dimensions added here
raster_img <- rasterGrob(
img_r,
interpolate = TRUE,
width = unit(0.9, "npc"),  # 90% of available width
height = unit(0.9, "npc"),  # 90% of available height
just = "center"            # Center the image
)
arranged <- arrangeGrob(
raster_img,
top = textGrob(title, gp = gpar(fontsize = 14, fontface = "bold"))
)
return(arranged)
}
# Added device sizing
grid.newpage()
dev.new(width = 10, height = 15, unit = "in")
cluster_grobs <- lapply(1:3, function(i) {
file_path <- paste0("cluster", i, ".png")
title <- paste("Cluster", i)
display_image(file_path, title)
})
# Added explicit heights
grid.arrange(
grobs = cluster_grobs,
ncol = 1,
heights = c(5, 5, 5)  # Equal heights for each plot
)
# Added explicit heights
grid.arrange(
grobs = cluster_grobs,
ncol = 1,
heights = c(5, 5, 5)  # Equal heights for each plot
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
isTRUE(FALSE)
isTRUE(TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
reticulate::py_config()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
